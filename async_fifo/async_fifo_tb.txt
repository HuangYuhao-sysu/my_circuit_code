`timescale 1ns /1ns 

module test();

// async_fifo Parameters   
parameter DATA_WIDTH  = 32;
parameter ADDR_WIDTH  = 4 ;
parameter DEPTH       = 16;

// async_fifo Inputs
reg   wclk;
reg   wrst_n;
reg   wen;
reg   [DATA_WIDTH-1:0]  wdata;
reg   rclk;
reg   rrst_n;
reg   ren;

// async_fifo Outputs
wire  [DATA_WIDTH-1:0]  rdata;
wire  wfull;
wire  rempty;

async_fifo #(
    .DATA_WIDTH ( 32 ),
    .ADDR_WIDTH ( 4  ),
    .DEPTH      ( 16 ))
 u_async_fifo (
    .wclk                    ( wclk     ),
    .wrst_n                  ( wrst_n   ),
    .wen                     ( wen      ),
    .wdata                   ( wdata    ),
    .rclk                    ( rclk     ),
    .rrst_n                  ( rrst_n   ),
    .ren                     ( ren      ),

    .rdata                   ( rdata    ),
    .wfull                   ( wfull    ),
    .rempty                  ( rempty   )
);
localparam CYCLE = 20;
localparam CYCLE1 = 40;



        //时钟周期，单位为ns，可在此修改时钟周期。
     
            //生成本地时钟50M
            initial begin
                wclk = 0;
                forever
                #(CYCLE/2)
                wclk=~wclk;
            end
            initial begin
                rclk = 0;
                forever
                #(CYCLE1/2)
                rclk=~rclk;
            end

            //产生复位信号
            initial begin
                wrst_n = 1;
                #2;
                wrst_n = 0;
                #(CYCLE*3);
                wrst_n = 1;
            end
            
             initial begin
                rrst_n = 1;
                #2;
                rrst_n = 0;
                #(CYCLE*3);
                rrst_n = 1;
            end

            always  @(posedge wclk or negedge wrst_n)begin
                if(wrst_n==1'b0)begin
                    wen <= 0;
                    ren <= 0;
                end
                else begin
                    wen <= $random;
                    ren <= $random;
                end
            end

            always  @(posedge rclk or negedge rrst_n)begin
                if(rrst_n==1'b0)begin                  
                    ren <= 0;
                end
                else begin                
                    ren <= $random;
                end
            end
always@(*)begin
  if(wen == 1)
    wdata= $random ;
  else
    wdata = 0;
end  
endmodule