// =============================================================================
// Project Name        : async_fifo
// Email               : huangyh76@mail2.sysu.edu.cn
// Company             : Sun Yat-Sen University
// Create Time         : 2022/06/22
// File Name           : mem.v
// Module Name         : mem
// Designer            : Huangyh
// Editor              : vs code
//
// *****************************************************************************
// Abstract            : recuirtment circuit training.
//
// *****************************************************************************
//
// Modification History:
// Date                By              Version             Change Description
// -----------------------------------------------------------------------------
// 2022/06/22       Huangyh             1.0                         none
//
// =============================================================================

`timescale 1ns / 1ps

module mem #(
    parameter DATA_WIDTH = 32,
    parameter ADDR_WIDTH = 4,
    parameter DEPTH = 16
) (
    input                       wclk,   // Clock
    input                       wen,    // write enable, active high
    input   [ADDR_WIDTH-1:0]    waddr,
    input   [DATA_WIDTH-1:0]    wdata,
    input   [ADDR_WIDTH-1:0]    raddr,

    output  [DATA_WIDTH-1:0]    rdata
);

// =========================================================================== \
// ============================= Internal signals ============================
// =========================================================================== /
reg [DATA_WIDTH-1:0]    mem [0:DEPTH-1];

// =========================================================================== \
// --------------------------------- Main Code ---------------------------------
// =========================================================================== /

//==============================================================================
// write logic
//==============================================================================
always @(posedge wclk) begin
    if (wen == 1'b1) begin
        mem[waddr]  <=  wdata;
    end
end

//==============================================================================
// read logic
//==============================================================================
assign rdata = mem[raddr];

endmodule