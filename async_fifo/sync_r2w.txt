// =============================================================================
// Project Name        : async_fifo
// Email               : huangyh76@mail2.sysu.edu.cn
// Company             : Sun Yat-Sen University
// Create Time         : 2022/06/22
// File Name           : sync_r2w.v
// Module Name         : sync_r2w
// Designer            : Huangyh
// Editor              : vs code
//
// *****************************************************************************
// Abstract            : recuirtment circuit training.
//
// *****************************************************************************
//
// Modification History:
// Date                By              Version             Change Description
// -----------------------------------------------------------------------------
// 2022/06/22       Huangyh             1.0                         none
//
// =============================================================================

`timescale 1ns / 1ps

module sync_r2w #(
    parameter ADDR_WIDTH = 4
) (
    input       wclk,                   // Clock
    input       wrst_n,                 // Asynchronous reset active low
    input       [ADDR_WIDTH:0]  rptr,   // gray code of read ptr, +1 bit

    // synced gray code of read ptr to clock domian.
    output  reg [ADDR_WIDTH:0]  wrptr2  
);

// =========================================================================== \
// ============================= Internal signals ============================
// =========================================================================== /
reg [ADDR_WIDTH:0]  wrptr1;

// =========================================================================== \
// --------------------------------- Main Code ---------------------------------
// =========================================================================== /

//==============================================================================
// two stage sync
//==============================================================================
always @(posedge wclk or negedge wrst_n) begin
    if (wrst_n == 1'b0) begin
        // reset
        wrptr1 <= 0;
        wrptr2 <= 0;
    end

    else begin
        wrptr1 <= rptr;
        wrptr2 <= wrptr1;
    end
end

endmodule