// =============================================================================
// Project Name        : width chagne
// Email               : huangyh76@mail2.sysu.edu.cn
// Company             : Sun Yat-Sen University
// Create Time         : 2022/07/02
// File Name           : width_change.v
// Module Name         : width_change
// Designer            : Huangyh
// Editor              : vs code
//
// *****************************************************************************
// Abstract            : recruitment code train
//
// *****************************************************************************
//
// Modification History:
// Date                By              Version             Change Description
// -----------------------------------------------------------------------------
// 2022/07/02       Huangyh             1.0                         none
//
// =============================================================================

`timescale 1ns / 1ps

module width_change # (
    parameter WIDTH = 8
) (
    input                       clk,    // Clock
    input                       rst_n,  // Asynchronous reset active low

    input       [WIDTH-1:0]     din,
    input                       din_vld,    // Active high

    output  reg  [WIDTH*2-1:0]  dout,
    output  reg                 dout_vld    // Active high
);

// =========================================================================== \
// ============================== Define parameter ===========================
// =========================================================================== /
localparam idle = 3'b001;
localparam s1   = 3'b010;
localparam s2   = 3'b100;

// =========================================================================== \
// ============================= Internal signals ============================
// =========================================================================== /
reg [2:0]       state;
reg [2:0]       next_state;

reg [WIDTH-1:0] tmp_din;

// =========================================================================== \
// --------------------------------- Main Code ---------------------------------
// =========================================================================== /

//==============================================================================
// state machine
//==============================================================================
always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        // reset
        state <= idle;
    end

    else begin
        state <= next_state;
    end
end

always @(*) begin
    case (state)
        idle:   begin
            if (din_vld == 1'b1) begin
                next_state      =   s1;
            end

            else begin
                next_state      =   idle;
            end
        end

        s1:     begin
            if (din_vld == 1'b1) begin
                next_state  =   s2;
            end

            else begin
                next_state  =   s1;
            end
        end

        s2:     begin
            if (din_vld == 1'b1) begin
                next_state  =   s2;
            end

            else begin
                next_state  =   s1;
            end
        end
        default :   next_state  =   idle;
    endcase
end

always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        // reset
        tmp_din <= 0;
    end

    else if (din_vld == 1'b1) begin
        tmp_din <=  din;
    end
end

always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        // reset
        dout_vld    <= 0;
    end

    else if (next_state == s2) begin
        dout_vld    <= 1;
    end

    else begin
        dout_vld    <= 0;
    end
end

always @(posedge clk or negedge rst_n) begin
    if (rst_n == 1'b0) begin
        // reset
        dout <= 0;
    end

    else if (next_state == s2) begin
        dout <= {tmp_din,din};
    end
end

endmodule